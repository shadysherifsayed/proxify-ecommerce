services:
  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: shadelane_app
    restart: unless-stopped
    working_dir: /var/www/html
    volumes:
      - ./:/var/www/html
      - ./docker/php/local.ini:/usr/local/etc/php/conf.d/local.ini
    ports:
      - "${APP_PORT:-8000}:80"
      - "${VITE_PORT:-5174}:5174"
    depends_on:
      - db
    networks:
      - shadelane_network
    environment:
      - DB_HOST=${DB_HOST:-db}
      - DB_DATABASE=${DB_DATABASE:-shadelane}
      - DB_USERNAME=${DB_USERNAME:-shadelane}
      - DB_PASSWORD=${DB_PASSWORD:-secret}

  queue:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: shadelane_queue
    restart: unless-stopped
    working_dir: /var/www/html
    volumes:
      - ./:/var/www/html
      - ./docker/php/local.ini:/usr/local/etc/php/conf.d/local.ini
    depends_on:
      - db
      - redis
    networks:
      - shadelane_network
    environment:
      - DB_HOST=${DB_HOST:-db}
      - DB_DATABASE=${DB_DATABASE:-shadelane}
      - DB_USERNAME=${DB_USERNAME:-shadelane}
      - DB_PASSWORD=${DB_PASSWORD:-secret}
    command: php artisan queue:work --sleep=3 --tries=3 --max-time=3600

  db:
    image: mysql:8.0
    container_name: shadelane_db
    restart: unless-stopped
    environment:
      MYSQL_DATABASE: ${DB_DATABASE:-shadelane}
      MYSQL_USER: ${DB_USERNAME:-shadelane}
      MYSQL_ROOT_PASSWORD: ${DB_PASSWORD:-secret}
      MYSQL_PASSWORD: ${DB_PASSWORD:-secret}
    volumes:
      - dbdata:/var/lib/mysql
    ports:
      - "${DB_PORT:-3306}:3306"
    networks:
      - shadelane_network

  phpmyadmin:
    image: phpmyadmin/phpmyadmin
    container_name: shadelane_phpmyadmin
    restart: unless-stopped
    environment:
      PMA_HOST: db
      PMA_PORT: ${DB_PORT:-3306}
      MYSQL_ROOT_PASSWORD: ${DB_PASSWORD:-secret}
    ports:
      - "${PHPMYADMIN_PORT:-8080}:80"
    depends_on:
      - db
    networks:
      - shadelane_network

  redis:
    image: redis:8.2-m01-alpine3.22
    container_name: shadelane_redis
    restart: unless-stopped
    ports:
      - "${REDIS_PORT:-6379}:6379"
    networks:
      - shadelane_network
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes --requirepass "${REDIS_PASSWORD:-}"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3


networks:
  shadelane_network:
    driver: bridge

volumes:
  dbdata:
    driver: local
  redis_data:
    driver: local